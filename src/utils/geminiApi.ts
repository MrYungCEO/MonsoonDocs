export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
  error?: {
    message: string;
  };
}

export const generateEbook = async (apiKey: string, prompt: string, systemPrompt?: string): Promise<string> => {
  const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-04-17:generateContent?key=${apiKey}`;
  
  const fullPrompt = systemPrompt 
    ? systemPrompt.replace('{topic}', prompt)
    : `Create a professional ebook in markdown format about: ${prompt}. 

Include the following structure:
- A compelling title and subtitle
- Author information
- Table of contents with clickable links
- Executive summary or introduction
- At least 5-7 detailed chapters with:
  - Chapter titles and subtitles
  - Comprehensive content with examples
  - Bullet points and numbered lists where appropriate
  - Key takeaways or summaries
- Conclusion with actionable insights
- About the author section
- References or further reading (if applicable)

Format the markdown with proper headings (# ## ###), emphasis (*bold*, _italic_), lists, quotes, and other markdown syntax for professional presentation. Make the content engaging, informative, and well-structured for easy reading.

The content should be substantial enough for a professional ebook (aim for comprehensive coverage of the topic).`;

  const requestBody = {
    contents: [{
      parts: [{
        text: fullPrompt
      }]
    }],
    generationConfig: {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 8192,
    }
  };

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);
    }

    const data: GeminiResponse = await response.json();
    
    if (data.error) {
      throw new Error(data.error.message);
    }

    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('No content generated by the AI');
    }

    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error('API call failed:', error);
    if (error instanceof Error) {
      throw error;
    }
    throw new Error('Failed to generate ebook content');
  }
};